/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

public class App {
    private static final Platform platform = new Platform();
public App() {/* compiled code */}

    static String[] parseUserPass(String[] strings) {
        String[] out = new String[2];
        // 0 - username
        // 1 - pass

        String username = null, passwd = null;

        if (strings.length > 1 && strings[1].indexOf("-u") == 0) {
            String[] result_username = strings[1].split("'");
            username= result_username[1];
        }
        if (strings.length > 2 && strings[2].indexOf("-p") == 0) {
            String[] result_passwd = strings[2].split("'");
            passwd = result_passwd[1];
        }
        out[0] = username;
        out[1] = passwd;
        return out;
    }

    public static void main(java.lang.String[] strings) {
        if (strings == null) {
            System.out.println("Hello world!");
            return;
        }

//        How the parsing works basically:
//        We initialize the argument values with null at the beginning
//        If the number of arguments is greater than the current argument index
//        Then we may parse the argument, but first we need to check if it's the
//        right argument (-u instead of -p for example)
//        Then we only need the text between "'" so we use the .split method
//        to isolate the text


        if (strings[0].equals("-create-user")) {
            String username, passwd;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            System.out.println(platform.createUser(username, passwd));
            return;
        }
        if (strings[0].equals("-create-post")) {
            String username, passwd, text = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-text") == 0) {
                String[] result_text = strings[3].split("'");
                text = result_text[1];
            }
            System.out.println(platform.createPost(username, passwd, text));
            return;
        }
        if (strings[0].equals("-delete-post-by-id")) {
            String username, passwd, id = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-id") == 0) {
                String[] result_id = strings[3].split("'");
                id = result_id[1];
            }
            int int_id;
            if (id == null) {
                int_id = -1;
            } else {
                int_id = Integer.parseInt(id);
            }
            System.out.println(platform.deletePostById(username, passwd, int_id));
            return;
        }
        if (strings[0].equals("-follow-user-by-username")) {
            String username, passwd, username2 = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-username") == 0) {
                String[] result_username2 = strings[3].split("'");
                username2 = result_username2[1];
            }
            System.out.println(platform.followUser(username, passwd, username2));
            return;
        }
        if (strings[0].equals("-unfollow-user-by-username")) {
            String username, passwd, username2 = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-username") == 0) {
                String[] result_username2 = strings[3].split("'");
                username2 = result_username2[1];
            }
            System.out.println(platform.unfollowUser(username, passwd, username2));
            return;
        }
        if (strings[0].equals("-like-post")) {
            String username, passwd, id = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-post-id") == 0) {
                String[] result_id = strings[3].split("'");
                id = result_id[1];
            }
            int int_id;
            if (id == null) {
                int_id = -1;
            } else {
                int_id = Integer.parseInt(id);
            }
            System.out.println(platform.likePostById(username, passwd, int_id));
            return;
        }
        if (strings[0].equals("-unlike-post")) {
            String username, passwd, id = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-post-id") == 0) {
                String[] result_id = strings[3].split("'");
                id = result_id[1];
            }
            int int_id;
            if (id == null) {
                int_id = -1;
            } else {
                int_id = Integer.parseInt(id);
            }
            System.out.println(platform.unlikePostById(username, passwd, int_id));
            return;
        }
        if (strings[0].equals("-like-comment")) {
            String username, passwd, id = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-comment-id") == 0) {
                String[] result_id = strings[3].split("'");
                id = result_id[1];
            }
            int int_id;
            if (id == null) {
                int_id = -1;
            } else {
                int_id = Integer.parseInt(id);
            }
            System.out.println(platform.likeCommentById(username, passwd, int_id));
            return;
        }
        if (strings[0].equals("-unlike-comment")) {
            String username, passwd, id = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-comment-id") == 0) {
                String[] result_id = strings[3].split("'");
                id = result_id[1];
            }
            int int_id;
            if (id == null) {
                int_id = -1;
            } else {
                int_id = Integer.parseInt(id);
            }
            System.out.println(platform.unlikeCommentById(username, passwd, int_id));
            return;
        }
        if (strings[0].equals("-get-followings-posts")) {
            String username, passwd;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            System.out.println(platform.getFollowingsPosts(username, passwd));
            return;
        }
        if (strings[0].equals("-get-user-posts")) {
            String username, passwd, username2 = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-username") == 0) {
                String[] result_username2 = strings[3].split("'");
                username2 = result_username2[1];
            }
            System.out.println(platform.getUserPosts(username, passwd, username2));
            return;
        }
        if (strings[0].equals("-get-post-details")) {
            String username, passwd, id = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-post-id") == 0) {
                String[] result_id = strings[3].split("'");
                id = result_id[1];
            }
            int int_id;
            if (id == null) {
                int_id = -1;
            } else {
                int_id = Integer.parseInt(id);
            }
            System.out.println(platform.getPostDetailsById(username, passwd, int_id));
            return;
        }
        if (strings[0].equals("-comment-post")) {
            String username, passwd, id = null, text = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-post-id") == 0) {
                String[] result_id = strings[3].split("'");
                id = result_id[1];
            }
            if (strings.length > 4 && strings[4].indexOf("-text") == 0) {
                String[] result_text = strings[4].split("'");
                text = result_text[1];
            }
            int int_id;
            if (id == null) {
                int_id = -1;
            } else {
                int_id = Integer.parseInt(id);
            }
            System.out.println(platform.commentPostById(username, passwd, int_id, text));
            return;
        }
        if (strings[0].equals("-delete-comment-by-id")) {
            String username, passwd, id = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-id") == 0) {
                String[] result_id = strings[3].split("'");
                id = result_id[1];
            }
            int int_id;
            if (id == null) {
                int_id = -1;
            } else {
                int_id = Integer.parseInt(id);
            }
            System.out.println(platform.deleteCommentById(username, passwd, int_id));
            return;
        }
        if (strings[0].equals("-get-following")) {
            String username, passwd;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            System.out.println(platform.getFollowing(username, passwd));
            return;
        }
        if (strings[0].equals("-get-followers")) {
            String username, passwd, username2 = null;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            if (strings.length > 3 && strings[3].indexOf("-username") == 0) {
                String[] result_username2 = strings[3].split("'");
                username2 = result_username2[1];
            }
            System.out.println(platform.getFollowers(username, passwd, username2));
            return;
        }
        if (strings[0].equals("-get-most-liked-posts")) {
            String username, passwd;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            System.out.println(platform.getTop5MostLikedPosts(username, passwd));
            return;
        }
        if (strings[0].equals("-get-most-commented-posts")) {
            String username, passwd;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            System.out.println(platform.getTop5MostCommentedPosts(username, passwd));
            return;
        }
        if (strings[0].equals("-get-most-followed-users")) {
            String username, passwd;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            System.out.println(platform.getTop5MostFollowedUsers(username, passwd));
            return;
        }
        if (strings[0].equals("-get-most-liked-users")) {
            String username, passwd;

            String[] out = parseUserPass(strings);
            username = out[0];
            passwd = out[1];

            System.out.println(platform.getTop5MostLikedUsers(username, passwd));
            return;
        }

        if (strings[0].equals("-cleanup-all")) {
            System.out.println(platform.cleanupAll());
        }
    }
}